console.log('üéØ Student.js file loaded!');

// Global variable to store current user data
let currentUser = {};

document.addEventListener('DOMContentLoaded', async () => {
    console.log('üéØ Student.js DOMContentLoaded event fired!');
    
    // Initialize player data when form is submitted
    const form = document.getElementById('info-form');
    if (form) {
        console.log('‚úÖ Form found, setting up submit handler');
        form.onsubmit = async (e) => {
            e.preventDefault();
            console.log('üöÄ Form submitted!');
            
            const playerData = {
                name: document.getElementById('student-name').value,
                phone: document.getElementById('student-phone').value,
                course: document.getElementById('student-class').value
            };
            
            console.log('üìù Player data:', playerData);

            if (typeof config !== 'undefined' && await config.initializePlayer(playerData)) {
                console.log('‚úÖ Player initialized, showing quiz...');
                
                // Store current user data globally
                currentUser = { ...playerData };
                console.log('üíæ Current user stored:', currentUser);
                
                // Hide form and show quiz
                const studentForm = document.getElementById('student-form');
                const quizSection = document.getElementById('quiz-container');
                
                if (studentForm) {
                    studentForm.style.display = 'none';
                    console.log('‚úÖ Form hidden');
                }
                
                if (quizSection) {
                    quizSection.style.display = 'block';
                    console.log('‚úÖ Quiz container shown');
                    // Show quiz content
                    showQuiz(playerData.course);
                } else {
                    console.log('‚ùå Quiz container not found');
                    // If quiz-container doesn't exist, try alternative IDs
                    const altQuiz = document.getElementById('quizSection') || document.getElementById('quiz');
                    if (altQuiz) {
                        altQuiz.style.display = 'block';
                        showQuiz(playerData.course);
                    }
                }
            } else {
                console.log('‚ùå Failed to initialize player');
            }
        };
    } else {
        console.log('‚ùå Form not found!');
    }
});

// Function to show quiz content
function showQuiz(courseType) {
    const quizContainer = document.getElementById('quiz-container');
    if (!quizContainer) return;

    // Get questions for the selected course
    const questions = getQuestionsByCourse(courseType);
    if (!questions || questions.length === 0) {
        quizContainer.innerHTML = '<p>Kh√¥ng c√≥ c√¢u h·ªèi cho kh√≥a h·ªçc n√†y.</p>';
        return;
    }

    // Create quiz HTML
    let quizHTML = `
        <div class="logo">
            <img src="assets/logo.svg" alt="Logo Trung T√¢m" class="center-logo" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div class="logo-fallback" style="display: none;">üéì</div>
            <h2>üéØ Quiz - ${getCourseDisplayName(courseType)}</h2>
            <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi b√†i ki·ªÉm tra nƒÉng l·ª±c!</p>
        </div>
        
        <div class="quiz-info">
            <div class="timer-section">
                <span>‚è∞ Th·ªùi gian c√≤n l·∫°i: </span>
                <span id="timer-text" class="timer">05:00</span>
            </div>
            <div class="progress-section">
                <span>üìù Ti·∫øn ƒë·ªô: </span>
                <span id="progress-text">0/${questions.length}</span>
            </div>
        </div>
        
        <form id="quiz-form">
            <div class="questions-container">
    `;

    // Add each question
    questions.forEach((question, index) => {
        quizHTML += `
            <div class="question-item" id="question-${index}">
                <h3>C√¢u ${index + 1}: ${question.question}</h3>
                <div class="options">
        `;
        
        question.options.forEach((option, optionIndex) => {
            quizHTML += `
                <label class="option-label">
                    <input type="radio" name="q${index}" value="${optionIndex}" required>
                    <span class="option-text">${option}</span>
                </label>
            `;
        });
        
        quizHTML += `
                </div>
            </div>
        `;
    });

    quizHTML += `
            </div>
            
            <div class="quiz-actions">
                <button type="submit" class="btn-primary" id="submit-quiz">üöÄ N·ªôp b√†i</button>
                <button type="button" class="btn-secondary" onclick="restartQuiz()">üîÑ L√†m l·∫°i</button>
            </div>
        </form>
    `;

    quizContainer.innerHTML = quizHTML;

    // Start timer
    startQuizTimer(questions.length);
    
    // Handle form submission
    const quizForm = document.getElementById('quiz-form');
    if (quizForm) {
        quizForm.onsubmit = (e) => {
            e.preventDefault();
            submitQuiz(questions);
        };
    }

    // Add progress tracking
    const radioButtons = quizContainer.querySelectorAll('input[type="radio"]');
    radioButtons.forEach(radio => {
        radio.addEventListener('change', () => {
            updateProgress(questions.length);
        });
    });
}

// Get questions by course type
function getQuestionsByCourse(courseType) {
    const questionsByClass = {
        'tieu-hoc': [
            {
                question: "What is your name?",
                options: ["My name is Tom", "I am fine", "Yes, please", "Goodbye"],
                correct: 0
            },
            {
                question: "How old are you?",
                options: ["I like cats", "I am 8 years old", "It's red", "Thank you"],
                correct: 1
            },
            {
                question: "What color is the sun?",
                options: ["Blue", "Green", "Yellow", "Purple"],
                correct: 2
            },
            {
                question: "How many fingers do you have?",
                options: ["Five", "Ten", "Fifteen", "Twenty"],
                correct: 1
            },
            {
                question: "What do you say when you meet someone?",
                options: ["Goodbye", "Hello", "Thank you", "Sorry"],
                correct: 1
            }
        ],
        'thcs': [
            {
                question: "She _____ to school every day.",
                options: ["go", "goes", "going", "gone"],
                correct: 1
            },
            {
                question: "There _____ many books on the table.",
                options: ["is", "am", "are", "be"],
                correct: 2
            },
            {
                question: "I _____ my homework yesterday.",
                options: ["do", "did", "does", "doing"],
                correct: 1
            },
            {
                question: "The weather is _____ today.",
                options: ["rain", "raining", "rainy", "rained"],
                correct: 2
            },
            {
                question: "We _____ English for 3 years.",
                options: ["learn", "learned", "have learned", "learning"],
                correct: 2
            }
        ],
        'thpt': [
            {
                question: "The book _____ by millions of people.",
                options: ["reads", "is read", "read", "reading"],
                correct: 1
            },
            {
                question: "If I _____ rich, I would buy a car.",
                options: ["am", "was", "were", "be"],
                correct: 2
            },
            {
                question: "She said she _____ come tomorrow.",
                options: ["will", "would", "shall", "should"],
                correct: 1
            },
            {
                question: "The man _____ is standing there is my teacher.",
                options: ["who", "which", "when", "where"],
                correct: 0
            },
            {
                question: "I wish I _____ speak English fluently.",
                options: ["can", "could", "may", "might"],
                correct: 1
            }
        ],
        'tieng-trung': [
            {
                question: "‰Ω†Â•Ω (n«ê h«éo) c√≥ nghƒ©a l√† g√¨?",
                options: ["T·∫°m bi·ªát", "Xin ch√†o", "C·∫£m ∆°n", "Xin l·ªói"],
                correct: 1
            },
            {
                question: "C√°ch n√≥i 'C·∫£m ∆°n' trong ti·∫øng Trung l√† g√¨?",
                options: ["ÂÜçËßÅ", "Ë∞¢Ë∞¢", "ÂØπ‰∏çËµ∑", "‰∏çÂÆ¢Ê∞î"],
                correct: 1
            },
            {
                question: "ÊàëÊòØÂ≠¶Áîü c√≥ nghƒ©a l√† g√¨?",
                options: ["T√¥i l√† gi√°o vi√™n", "T√¥i l√† h·ªçc sinh", "T√¥i l√† b√°c sƒ©", "T√¥i l√† sinh vi√™n"],
                correct: 1
            },
            {
                question: "S·ªë 5 trong ti·∫øng Trung ƒë·ªçc l√†?",
                options: ["‰∏â (sƒÅn)", "Âõõ (s√¨)", "‰∫î (w«î)", "ÂÖ≠ (li√π)"],
                correct: 2
            },
            {
                question: "ËøôÊòØ‰ªÄ‰πàÔºü(zh√® sh√¨ sh√©n me) c√≥ nghƒ©a l√† g√¨?",
                options: ["ƒê√¢y l√† g√¨?", "Kia l√† g√¨?", "Ai v·∫≠y?", "L√†m g√¨ v·∫≠y?"],
                correct: 0
            }
        ],
        'tieng-trung-11': [
            {
                question: "‰Ω†Â•ΩÔºåÊàëÂè´Â∞èÊòé„ÄÇ‰∏≠ÁöÑ\"Âè´\"ÊòØ‰ªÄ‰πàÊÑèÊÄùÔºü",
                options: ["l√†", "t√™n", "k√™u/g·ªçi l√†", "s·ªëng"],
                correct: 2
            },
            {
                question: "‰Ω†‰ªéÂì™ÈáåÊù•Ôºüc√¢u n√†y h·ªèi v·ªÅ ƒëi·ªÅu g√¨?",
                options: ["B·∫°n ƒëi ƒë√¢u?", "B·∫°n t·ª´ ƒë√¢u ƒë·∫øn?", "B·∫°n l√†m g√¨?", "B·∫°n h·ªçc g√¨?"],
                correct: 1
            },
            {
                question: "‰ªäÂ§©Â§©Ê∞îÊÄé‰πàÊ†∑Ôºüc√≥ nghƒ©a l√† g√¨?",
                options: ["H√¥m nay th·ª© m·∫•y?", "H√¥m nay bao nhi√™u ƒë·ªô?", "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?", "H√¥m nay l√†m g√¨?"],
                correct: 2
            },
            {
                question: "ÊàëÊÉ≥ÂñùÊ∞¥ c√≥ nghƒ©a l√† g√¨?",
                options: ["T√¥i mu·ªën ƒÉn c∆°m", "T√¥i mu·ªën u·ªëng n∆∞·ªõc", "T√¥i mu·ªën ng·ªß", "T√¥i mu·ªën ƒëi"],
                correct: 1
            },
            {
                question: "ËØ∑ÈóÆÔºåÂéïÊâÄÂú®Âì™ÈáåÔºül√† c√¢u h·ªèi v·ªÅ ƒëi·ªÅu g√¨?",
                options: ["H·ªèi gi·ªù", "H·ªèi ƒë∆∞·ªùng ƒë·∫øn nh√† v·ªá sinh", "H·ªèi t√™n", "H·ªèi gi√°"],
                correct: 1
            }
        ],
        'tieng-anh-giao-tiep': [
            {
                question: "How do you respond to 'How are you?'",
                options: ["I'm fine, thank you", "My name is John", "I'm 25 years old", "I live in Vietnam"],
                correct: 0
            },
            {
                question: "What do you say when you want to ask for directions?",
                options: ["How much is this?", "Excuse me, where is...?", "What time is it?", "Can I help you?"],
                correct: 1
            },
            {
                question: "At a restaurant, how do you order food?",
                options: ["I want to buy this", "I'd like to order...", "How much does it cost?", "Where is the toilet?"],
                correct: 1
            },
            {
                question: "How do you politely decline an invitation?",
                options: ["No!", "I don't want to", "I'm sorry, I can't", "That's bad"],
                correct: 2
            },
            {
                question: "What do you say when someone helps you?",
                options: ["Goodbye", "Hello", "Thank you very much", "You're welcome"],
                correct: 2
            }
        ],
        'tieng-anh-giao-tiep-11': [
            {
                question: "In a business meeting, how do you introduce yourself?",
                options: ["Hi, I'm...", "Good morning, my name is... and I work for...", "Hello everyone", "What's up?"],
                correct: 1
            },
            {
                question: "How do you express disagreement politely?",
                options: ["You're wrong", "I disagree with you", "I'm afraid I don't quite agree", "That's stupid"],
                correct: 2
            },
            {
                question: "What's the best way to ask for clarification?",
                options: ["What?", "Could you please repeat that?", "I don't understand", "Say again"],
                correct: 1
            },
            {
                question: "How do you make a suggestion?",
                options: ["You must do this", "Why don't we...?", "Do this now", "I command you to..."],
                correct: 1
            },
            {
                question: "How do you end a phone conversation professionally?",
                options: ["Bye", "Thank you for your time. Have a great day!", "See you", "OK, done"],
                correct: 1
            }
        ],
        'chung-chi': [
            {
                question: "Which sentence shows the correct use of the present perfect?",
                options: ["I go to Paris last year", "I have been to Paris", "I am going to Paris", "I will go to Paris"],
                correct: 1
            },
            {
                question: "Choose the correct conditional sentence:",
                options: ["If I will have money, I buy a car", "If I have money, I will buy a car", "If I had money, I will buy a car", "If I have money, I would buy a car"],
                correct: 1
            },
            {
                question: "Which is the correct passive form of 'They built the house'?",
                options: ["The house built by them", "The house was built by them", "The house is built by them", "The house has built by them"],
                correct: 1
            },
            {
                question: "What's the meaning of 'break the ice' in conversation?",
                options: ["To start a conversation", "To end a conversation", "To argue", "To cool down"],
                correct: 0
            },
            {
                question: "Choose the correct reported speech: He said, 'I am working.'",
                options: ["He said he is working", "He said he was working", "He said he has been working", "He said he will work"],
                correct: 1
            }
        ]
    };
    
    return questionsByClass[courseType] || [];
}

// Get course display name
function getCourseDisplayName(courseType) {
    const displayNames = {
        'tieu-hoc': 'Kh·ªëi Ti·ªÉu h·ªçc (Starters - Movers - Flyers)',
        'thcs': 'Kh·ªëi THCS (Pre-KET - PET)', 
        'thpt': 'Luy·ªán thi THPT',
        'tieng-trung': 'Ti·∫øng Trung c∆° b·∫£n',
        'tieng-trung-11': 'Ti·∫øng Trung c∆° b·∫£n 1-1',
        'tieng-anh-giao-tiep': 'Ti·∫øng Anh giao ti·∫øp',
        'tieng-anh-giao-tiep-11': 'Ti·∫øng Anh giao ti·∫øp 1-1',
        'chung-chi': 'Luy·ªán thi ch·ª©ng ch·ªâ (B1, B2, TOEIC, IELTS)'
    };
    return displayNames[courseType] || courseType;
}

// Start quiz timer
function startQuizTimer(totalQuestions) {
    let timeRemaining = 300; // 5 minutes
    const timerDisplay = document.getElementById('timer-text');
    
    const timer = setInterval(() => {
        timeRemaining--;
        
        const minutes = Math.floor(timeRemaining / 60);
        const seconds = timeRemaining % 60;
        const formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        if (timerDisplay) {
            timerDisplay.textContent = formattedTime;
            
            // Change color when time is running out
            if (timeRemaining <= 60) {
                timerDisplay.style.color = '#e74c3c';
                timerDisplay.style.animation = 'pulse 1s infinite';
            } else if (timeRemaining <= 120) {
                timerDisplay.style.color = '#f39c12';
            }
        }
        
        // Time's up
        if (timeRemaining <= 0) {
            clearInterval(timer);
            autoSubmitQuiz();
        }
    }, 1000);
    
    // Store timer reference for cleanup
    window.quizTimer = timer;
}

// Auto submit quiz when time runs out
function autoSubmitQuiz() {
    alert('‚è∞ H·∫øt th·ªùi gian! T·ª± ƒë·ªông n·ªôp b√†i...');
    setTimeout(() => {
        const quizForm = document.getElementById('quiz-form');
        if (quizForm) {
            quizForm.dispatchEvent(new Event('submit'));
        }
    }, 1000);
}

// Update progress
function updateProgress(totalQuestions) {
    const answeredQuestions = document.querySelectorAll('input[type="radio"]:checked').length;
    const progressText = document.getElementById('progress-text');
    if (progressText) {
        progressText.textContent = `${answeredQuestions}/${totalQuestions}`;
    }
}

// Submit quiz
function submitQuiz(questions) {
    // Stop timer
    if (window.quizTimer) {
        clearInterval(window.quizTimer);
        window.quizTimer = null;
    }
    
    let score = 0;
    const answers = {};
    
    // Calculate score
    questions.forEach((question, index) => {
        const selected = document.querySelector(`input[name="q${index}"]:checked`);
        if (selected) {
            const answer = parseInt(selected.value);
            answers[`q${index}`] = {
                selected: answer,
                correct: question.correct,
                isCorrect: answer === question.correct,
                question: question.question,
                selectedOption: question.options[answer],
                correctOption: question.options[question.correct]
            };
            if (answer === question.correct) {
                score++;
            }
        }
    });
    
    console.log('üéØ Quiz completed! Score:', score);
    console.log('üîç Current player ID:', config.currentPlayerId);
    
    // Save result to database if config is available
    if (typeof config !== 'undefined' && config.updateQuizResult) {
        config.updateQuizResult({
            score: score,
            timestamp: new Date().toISOString()
        }).then(() => {
            console.log('‚úÖ Score saved successfully!');
        }).catch(error => {
            console.error('‚ùå L·ªói l∆∞u ƒëi·ªÉm:', error);
        });
    } else {
        console.error('‚ùå Config or updateQuizResult not available');
    }
    
    // Show result
    showResult(score, answers, questions.length);
}

// Show quiz result
function showResult(score, answers, totalQuestions) {
    const quizContainer = document.getElementById('quiz-container');
    const passed = score >= 3;
    
    let resultHTML = `
        <div class="logo">
            <img src="assets/logo.svg" alt="Logo Trung T√¢m" class="center-logo" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div class="logo-fallback" style="display: none;">üéì</div>
            <h2>üìä K·∫øt Qu·∫£ Quiz</h2>
        </div>
        
        <div class="result-score">
            üéØ B·∫°n tr·∫£ l·ªùi ƒë√∫ng: ${score}/${totalQuestions} c√¢u
        </div>
    `;
    
    // Show detailed answers if passed
    if (passed) {
        resultHTML += '<div class="detailed-answers">';
        Object.keys(answers).forEach((key, index) => {
            const answer = answers[key];
            resultHTML += `
                <div class="answer-item ${answer.isCorrect ? 'correct' : 'incorrect'}">
                    <strong>C√¢u ${index + 1}:</strong> ${answer.isCorrect ? '‚úÖ' : '‚ùå'}<br>
                    <small>B·∫°n ch·ªçn: ${answer.selectedOption}</small><br>
                    ${!answer.isCorrect ? `<small class="correct-answer">ƒê√°p √°n ƒë√∫ng: ${answer.correctOption}</small>` : ''}
                </div>
            `;
        });
        resultHTML += '</div>';
    }
    
    if (passed) {
        resultHTML += `
            <div class="result-message success">
                üéâ <strong>Ch√∫c m·ª´ng b·∫°n!</strong><br>
                B·∫°n ƒë√£ ƒë·∫°t y√™u c·∫ßu ƒë·ªÉ tham gia v√≤ng quay may m·∫Øn!<br>
                <small>C√≥ c∆° h·ªôi nh·∫≠n ƒë∆∞·ª£c nhi·ªÅu ph·∫ßn qu√† h·∫•p d·∫´n!</small>
            </div>
            <button class="btn-primary" onclick="showWheel()">üéØ V√†o v√≤ng quay may m·∫Øn</button>
        `;
    } else {
        resultHTML += `
            <div class="result-message warning">
                üòî <strong>R·∫•t ti·∫øc!</strong><br>
                B·∫°n c·∫ßn tr·∫£ l·ªùi ƒë√∫ng t·ªëi thi·ªÉu 3/${totalQuestions} c√¢u ƒë·ªÉ v√†o v√≤ng quay.<br>
                <small>Nh∆∞ng ƒë·ª´ng lo! Ch√∫ng t√¥i v·∫´n c√≥ nh·ªØng ∆∞u ƒë√£i d√†nh cho b·∫°n.</small>
            </div>
            <button class="btn-secondary" onclick="restartQuiz()">üîÑ L√†m l·∫°i Quiz</button>
            <button class="btn-primary" onclick="showCourseRegistration()">üéì T√¨m hi·ªÉu kh√≥a h·ªçc</button>
        `;
    }
    
    quizContainer.innerHTML = resultHTML;
}

// Restart quiz
function restartQuiz() {
    const quizContainer = document.getElementById('quiz-container');
    if (quizContainer) {
        // Get the course type from the current user or form
        const courseSelect = document.getElementById('student-class');
        const courseType = courseSelect ? courseSelect.value : 'tieu-hoc';
        showQuiz(courseType);
    }
}

// Show course registration for users who didn't pass
function showCourseRegistration() {
    const quizContainer = document.getElementById('quiz-container');
    quizContainer.innerHTML = `
        <div class="logo">
            <img src="assets/logo.svg" alt="Logo Trung T√¢m" class="center-logo" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div class="logo-fallback" style="display: none;">üéì</div>
            <h2>üéì ƒêƒÉng K√Ω Kh√≥a H·ªçc</h2>
            <p>M·∫∑c d√π b·∫°n ch∆∞a ƒë·∫°t ƒëi·ªÅu ki·ªán v√†o v√≤ng quay, ch√∫ng t√¥i v·∫´n c√≥ nhi·ªÅu ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho b·∫°n!</p>
        </div>
        
        <div class="registration-options">
            <button class="btn-primary" onclick="registerCourse()">‚úÖ ƒêƒÉng K√Ω Ngay</button>
            <button class="btn-secondary" onclick="declineCourse()">‚ùå ƒê·ªÉ Sau</button>
        </div>
    `;
}

// Register course
function registerCourse() {
    if (typeof config !== 'undefined' && config.updateFinalChoice) {
        config.updateFinalChoice({
            decision: true,
            timestamp: new Date().toISOString()
        }).catch(error => {
            console.error('‚ùå L·ªói l∆∞u quy·∫øt ƒë·ªãnh:', error);
        });
    }
    showFinalScreen('register');
}

// Decline course
function declineCourse() {
    if (typeof config !== 'undefined' && config.updateFinalChoice) {
        config.updateFinalChoice({
            decision: false,
            timestamp: new Date().toISOString()
        }).catch(error => {
            console.error('‚ùå L·ªói l∆∞u quy·∫øt ƒë·ªãnh:', error);
        });
    }
    showFinalScreen('decline');
}

// Show final screen
function showFinalScreen(decision) {
    const quizContainer = document.getElementById('quiz-container');
    const decisionText = decision === 'register' ? 'ƒêƒÇNG K√ù' : 'ƒê·ªÇ SAU';
    const decisionColor = decision === 'register' ? '#27ae60' : '#f39c12';
    
    let prizeSection = '';
    if (decision === 'register') {
        prizeSection = `
            <div class="prize-info">
                <h3>üéÅ ∆Øu ƒê√£i ƒê·∫∑c Bi·ªát</h3>
                <div class="prize-name">üéÅ H·ªçc b·ªïng 15% kh√≥a h·ªçc</div>
                <p><strong>Trung t√¢m ƒë√£ ghi nh·∫≠n th√¥ng tin v√† s·∫Ω trao qu√† tr·ª±c ti·∫øp khi b·∫°n tham d·ª± l·ªõp h·ªçc!</strong></p>
            </div>
        `;
    }
    
    quizContainer.innerHTML = `
        <div class="logo">
            <img src="assets/logo.svg" alt="Logo Trung T√¢m" class="center-logo" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div class="logo-fallback" style="display: none;">üéì</div>
            <h2>üéì Trung T√¢m Ngo·∫°i Ng·ªØ Vi·ªát √öc Vƒ©nh Long</h2>
        </div>
        
        <div class="final-message" style="color: ${decisionColor};">
            <h3>üéâ C·∫£m ∆°n b·∫°n ƒë√£ tham gia!</h3>
            <p>B·∫°n ƒë√£ ch·ªçn: <strong>${decisionText}</strong></p>
        </div>
        
        ${prizeSection}
        
        <div class="contact-info">
            <h3>üìû Th√¥ng tin li√™n h·ªá:</h3>
            <p><strong>üè¢ ƒê·ªãa ch·ªâ:</strong> S·ªë 36/7, ƒë∆∞·ªùng Tr·∫ßn Ph√∫, Ph∆∞·ªùng Ph∆∞·ªõc H·∫≠u, T·ªânh Vƒ©nh Long</p>
            <p><strong>üì± Hotline:</strong> 02703.912.007</p>
            <p><strong>üìß Email:</strong> ngoainguvietuceducation@gmail.com</p>
            <p><strong>üåê Website:</strong> ngoainguvietuc.vn</p>
        </div>
        
        <div class="final-actions">
            <button class="btn-primary" onclick="window.open('tel:02703.912.007')">üìû G·ªçi ngay</button>
            <button class="btn-secondary" onclick="location.reload()">üîÑ L√†m l·∫°i</button>
        </div>
    `;
}

// Show wheel
function showWheel() {
    const quizContainer = document.getElementById('quiz-container');
    
    console.log('üéØ Showing wheel...');
    console.log('üîç Current player ID:', config.currentPlayerId);
    
    quizContainer.innerHTML = `
        <div class="logo">
            <img src="assets/logo.svg" alt="Logo Trung T√¢m" class="center-logo" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div class="logo-fallback" style="display: none;">üéì</div>
            <h2>üéØ V√≤ng Quay May M·∫Øn</h2>
            <p>Ch√∫c m·ª´ng b·∫°n! B·∫°n ƒë√£ ƒë·∫°t ƒëi·ªÅu ki·ªán tham gia v√≤ng quay</p>
        </div>
        
        <div class="wheel-container">
            <div class="wheel-wrapper">
                <div class="wheel" id="prize-wheel">
                    <div class="wheel-center">
                        <span>üéØ</span>
                    </div>
                    <!-- Prize segments with labels -->
                    <div class="prize-segment segment-1" style="--start: 0deg; --end: 72deg;">
                        <div class="prize-label">
                            <div class="prize-icon-wheel">‚úèÔ∏è</div>
                            <div class="prize-name-wheel">B√∫t vi·∫øt</div>
                        </div>
                    </div>
                    <div class="prize-segment segment-2" style="--start: 72deg; --end: 144deg;">
                        <div class="prize-label">
                            <div class="prize-icon-wheel">üéí</div>
                            <div class="prize-name-wheel">Balo VAE</div>
                        </div>
                    </div>
                    <div class="prize-segment segment-3" style="--start: 144deg; --end: 216deg;">
                        <div class="prize-label">
                            <div class="prize-icon-wheel">üìö</div>
                            <div class="prize-name-wheel">Gi√°o tr√¨nh</div>
                        </div>
                    </div>
                    <div class="prize-segment segment-4" style="--start: 216deg; --end: 288deg;">
                        <div class="prize-label">
                            <div class="prize-icon-wheel">üìè</div>
                            <div class="prize-name-wheel">Th∆∞·ªõc</div>
                        </div>
                    </div>
                    <div class="prize-segment segment-5" style="--start: 288deg; --end: 360deg;">
                        <div class="prize-label">
                            <div class="prize-icon-wheel">üëï</div>
                            <div class="prize-name-wheel">√Åo VAE</div>
                        </div>
                    </div>
                </div>
                <!-- Fixed pointer that doesn't move -->
                <div class="wheel-pointer"></div>
            </div>
            
            <button class="spin-button" id="spin-btn" onclick="spinWheel()">üéØ Quay Th∆∞·ªüng</button>
            
            <div id="prize-result" style="display: none;">
                <h3>üéâ Ch√∫c m·ª´ng b·∫°n!</h3>
                <div class="won-prize">
                    <span class="prize-icon-large" id="won-prize-icon"></span>
                    <div class="prize-name-large" id="won-prize-name"></div>
                    <div class="prize-description" id="won-prize-description"></div>
                </div>
                
                <div class="prize-actions">
                    <button class="btn-primary" onclick="registerForPrize()">‚úÖ ƒêƒÉng k√Ω nh·∫≠n qu√†</button>
                    <button class="btn-secondary" onclick="contactLater()">üìû T√¥i s·∫Ω li√™n h·ªá l·∫°i sau</button>
                </div>
            </div>
        </div>
    `;
    
    console.log('‚úÖ Wheel HTML created successfully');
}

// Spin the wheel
function spinWheel() {
    const wheel = document.getElementById('prize-wheel');
    const spinBtn = document.getElementById('spin-btn');
    const prizeResult = document.getElementById('prize-result');
    
    if (!wheel || !spinBtn) {
        console.error('‚ùå Wheel elements not found');
        return;
    }
    
    console.log('üéØ Spinning wheel...');
    console.log('üîç Current player ID:', config.currentPlayerId);
    
    // Disable button during spin
    spinBtn.disabled = true;
    spinBtn.textContent = 'üîÑ ƒêang quay...';
    
    // Random prize
    const randomIndex = Math.floor(Math.random() * prizes.length);
    currentPrize = prizes[randomIndex];
    
    console.log('üéÅ Selected prize:', currentPrize);
    
    // Random rotation (multiple full rotations + prize position)
    const baseRotation = 1440; // 4 full rotations
    const prizeRotation = (360 / prizes.length) * randomIndex;
    const finalRotation = baseRotation + prizeRotation;
    
    // Add spinning class
    wheel.classList.add('spinning');
    wheel.style.transform = `rotate(${finalRotation}deg)`;
    
    // Show result after animation
    setTimeout(() => {
        wheel.classList.remove('spinning');
        
        // Update prize display
        document.getElementById('won-prize-icon').textContent = currentPrize.icon;
        document.getElementById('won-prize-name').textContent = currentPrize.name;
        document.getElementById('won-prize-description').textContent = currentPrize.description;
        
        prizeResult.style.display = 'block';
        spinBtn.style.display = 'none';
        
        console.log('üéâ Wheel stopped! Saving prize to Firebase...');
        
        // Save prize to Firebase
        if (typeof config !== 'undefined' && config.updateWheelResult) {
            config.updateWheelResult({
                prize: currentPrize.name,
                prizeIcon: currentPrize.icon,
                prizeDescription: currentPrize.description,
                timestamp: new Date().toISOString()
            }).then(() => {
                console.log('‚úÖ Prize saved successfully!');
            }).catch(error => {
                console.error('‚ùå L·ªói l∆∞u ph·∫ßn th∆∞·ªüng:', error);
            });
        } else {
            console.error('‚ùå Config or updateWheelResult not available');
        }
    }, 4000); // 4 seconds to match CSS animation
}

// Prize wheel prizes
const prizes = [
    {
        name: "Combo b√∫t vi·∫øt",
        icon: "‚úèÔ∏è",
        description: "B·ªô b√∫t vi·∫øt ch·∫•t l∆∞·ª£ng cao"
    },
    {
        name: "Balo VAE",
        icon: "üéí",
        description: "Balo th∆∞∆°ng hi·ªáu VAE"
    },
    {
        name: "Gi√°o tr√¨nh",
        icon: "üìö",
        description: "B·ªô gi√°o tr√¨nh h·ªçc t·∫≠p"
    },
    {
        name: "Th∆∞·ªõc",
        icon: "üìè",
        description: "Th∆∞·ªõc k·∫ª ch√≠nh x√°c"
    },
    {
        name: "√Åo VAE",
        icon: "üëï",
        description: "√Åo thun th∆∞∆°ng hi·ªáu VAE"
    }
];

let currentPrize = null;

function registerForPrize() {
    console.log('‚úÖ User chose to register for prize');
    console.log('üîç Current player ID:', config.currentPlayerId);
    console.log('üéÅ Prize:', currentPrize);
    
    if (typeof config !== 'undefined' && config.updateFinalChoice) {
        config.updateFinalChoice({
            decision: true,
            prize: currentPrize.name,
            prizeIcon: currentPrize.icon,
            timestamp: new Date().toISOString()
        }).then(() => {
            console.log('‚úÖ Final choice saved successfully!');
        }).catch(error => {
            console.error('‚ùå L·ªói l∆∞u quy·∫øt ƒë·ªãnh:', error);
        });
    } else {
        console.error('‚ùå Config or updateFinalChoice not available');
    }
    showFinalScreenWithPrize();
}

function contactLater() {
    console.log('üìû User chose to contact later');
    console.log('üîç Current player ID:', config.currentPlayerId);
    console.log('üéÅ Prize:', currentPrize);
    
    if (typeof config !== 'undefined' && config.updateFinalChoice) {
        config.updateFinalChoice({
            decision: false,
            prize: currentPrize.name,
            prizeIcon: currentPrize.icon,
            timestamp: new Date().toISOString()
        }).then(() => {
            console.log('‚úÖ Final choice saved successfully!');
        }).catch(error => {
            console.error('‚ùå L·ªói l∆∞u quy·∫øt ƒë·ªãnh:', error);
        });
    } else {
        console.error('‚ùå Config or updateFinalChoice not available');
    }
    showFinalScreenContactLater();
}

function showFinalScreenWithPrize() {
    const quizContainer = document.getElementById('quiz-container');
    const playerName = document.getElementById('student-name')?.value || 'B·∫°n';
    
    quizContainer.innerHTML = `
        <div class="logo">
            <img src="assets/logo.svg" alt="Logo Trung T√¢m" class="center-logo" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div class="logo-fallback" style="display: none;">üéì</div>
            <h2>üéì Trung T√¢m Ngo·∫°i Ng·ªØ Vi·ªát √öc Vƒ©nh Long</h2>
        </div>
        
        <div class="final-message" style="color: #27ae60;">
            <h3>üéâ Ch√∫c m·ª´ng ${playerName}!</h3>
            <p>B·∫°n ƒë√£ ch·ªçn: <strong>ƒêƒÇNG K√ù NH·∫¨N QU√Ä</strong></p>
        </div>
        
        <div class="prize-info">
            <h3>üéÅ Ph·∫ßn Th∆∞·ªüng C·ªßa B·∫°n</h3>
            <div class="prize-name">
                <span class="prize-icon-large">${currentPrize.icon}</span>
                ${currentPrize.name}
            </div>
            <p><strong>Trung t√¢m ƒë√£ ghi nh·∫≠n th√¥ng tin v√† s·∫Ω trao qu√† tr·ª±c ti·∫øp khi b·∫°n tham d·ª± l·ªõp h·ªçc!</strong></p>
        </div>
        
        <div class="contact-info">
            <h3>üìû Th√¥ng tin li√™n h·ªá:</h3>
            <p><strong>üè¢ ƒê·ªãa ch·ªâ:</strong> S·ªë 36/7, ƒë∆∞·ªùng Tr·∫ßn Ph√∫, Ph∆∞·ªùng Ph∆∞·ªõc H·∫≠u, T·ªânh Vƒ©nh Long</p>
            <p><strong>üì± Hotline:</strong> 02703.912.007</p>
            <p><strong>üìß Email:</strong> ngoainguvietuceducation@gmail.com</p>
            <p><strong>üåê Website:</strong> ngoainguvietuc.vn</p>
        </div>
        
        <div class="final-actions">
            <button class="btn-primary" onclick="window.open('tel:02703.912.007')">üìû G·ªçi ngay</button>
            <button class="btn-secondary" onclick="location.reload()">üîÑ L√†m l·∫°i</button>
        </div>
    `;
}

function showFinalScreenContactLater() {
    const quizContainer = document.getElementById('quiz-container');
    
    quizContainer.innerHTML = `
        <div class="logo">
            <img src="assets/logo.svg" alt="Logo Trung T√¢m" class="center-logo" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
            <div class="logo-fallback" style="display: none;">üéì</div>
            <h2>üéì Trung T√¢m Ngo·∫°i Ng·ªØ Vi·ªát √öc Vƒ©nh Long</h2>
        </div>
        
        <div class="final-message" style="color: #f39c12;">
            <h3>üéâ C·∫£m ∆°n b·∫°n ƒë√£ tham gia th·ª≠ s·ª©c!</h3>
            <p>B·∫°n ƒë√£ ch·ªçn: <strong>LI√äN H·ªÜ L·∫†I SAU</strong></p>
        </div>
        
        <div class="prize-info">
            <h3>üéÅ Ph·∫ßn Th∆∞·ªüng ƒê√£ Tr√∫ng</h3>
            <div class="prize-name">
                <span class="prize-icon-large">${currentPrize.icon}</span>
                ${currentPrize.name}
            </div>
            <p><strong>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n s·ªõm nh·∫•t ƒë·ªÉ trao ph·∫ßn th∆∞·ªüng!</strong></p>
        </div>
        
        <div class="contact-info">
            <h3>üìû Th√¥ng tin li√™n h·ªá:</h3>
            <p><strong>üè¢ ƒê·ªãa ch·ªâ:</strong> S·ªë 36/7, ƒë∆∞·ªùng Tr·∫ßn Ph√∫, Ph∆∞·ªùng Ph∆∞·ªõc H·∫≠u, T·ªânh Vƒ©nh Long</p>
            <p><strong>üì± Hotline:</strong> 02703.912.007</p>
            <p><strong>üìß Email:</strong> ngoainguvietuceducation@gmail.com</p>
            <p><strong>üåê Website:</strong> ngoainguvietuc.vn</p>
        </div>
        
        <div class="final-actions">
            <button class="btn-primary" onclick="window.open('tel:02703.912.007')">üìû G·ªçi ngay</button>
            <button class="btn-secondary" onclick="location.reload()">üîÑ L√†m l·∫°i</button>
        </div>
    `;
}